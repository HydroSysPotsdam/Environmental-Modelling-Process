# Define bounds for the parameters
bounds = {"Sm": (0, 400), "beta": (0, 2), "alfa": (0, 1), "Rs": (8, 200), "Rf": (1, 7)}

# Create random parameter sets within the given ranges
n = 50
mult = n  # multiplier for integer generation, after which the integers are divided by mult to get the samples
samples_Sm = np.array(random.sample(range(bounds["Sm"][0]*mult, bounds["Sm"][1]*mult), n)) / mult  # generate array of random samples within bounds
samples_beta = np.array(random.sample(range(bounds["beta"][0]*mult, bounds["beta"][1]*mult), n)) / mult
samples_alfa = np.array(random.sample(range(bounds["alfa"][0]*mult, bounds["alfa"][1]*mult), n)) / mult
samples_Rs = np.array(random.sample(range(bounds["Rs"][0]*mult, bounds["Rs"][1]*mult), n)) / mult
samples_Rf = np.array(random.sample(range(bounds["Rf"][0]*mult, bounds["Rf"][1]*mult), n)) / mult
parameter_sets = np.column_stack((samples_Sm, samples_beta, samples_alfa, samples_Rs, samples_Rf))  # stack the generates samples as columns

# Run HyMod for all the parameter sets and compute the metrics
l_nse = []
l_kge = []
for set_id, parameter_set in enumerate(parameter_sets):
    # Run HyMod, and get the ouput
    Sm, beta, alfa, Rs, Rf = parameter_set
    runoff_sim, states, fluxes = HyMod.hymod_sim([Sm, beta, alfa, 1/Rs, 1/Rf], P, evap)
    df_model = pd.DataFrame({'Q [mm/day]': runoff_sim[-365:], 'ET [mm/day]': fluxes.T[0][-365:], 'Date': df_obs["Date"].to_numpy()})
    l_kge.append(round(kge_only(df_obs["Q [mm/day]"], df_model["Q [mm/day]"]), 3))  # calculate rmse, round result and append to list 
    l_nse.append(round(nse(df_obs["Q [mm/day]"], df_model["Q [mm/day]"]), 3))  # calculate bc rmse, round result and append to list

df_results = pd.DataFrame({'NSE': l_nse, 'KGE': l_kge})  # create dataframe from metric results

# Plot results
plt.close()
fig, ax = plt.subplots(1, 1, figsize=(4, 4))  # create three subplots
sns.scatterplot(df_results, x='NSE', y='KGE', ax=ax)
ax.invert_xaxis()
ax.invert_yaxis()
plt.show()